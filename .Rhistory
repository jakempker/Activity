means <- data.frame(with(act0, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
View(means)
?tapply
?mutate
act0 <- mutate(act0, steps_imp = tapply(steps, INDEX=interval_char, mean, na.rm=TRUE))
?merge
library(plyr)
means <- with(act0, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE))
print(means)
class(means)
m <- as.data.frame(means)
?do.call
m <- do.call(rbind, means)
m <- do.call(rbind, m)
levels(act0$interval_char)
l<- levels(act0$interval_char)
means <- as.numeric(with(act0, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(l,means)
View(n)
interval_char<- levels(act0$interval_char)
n <- data.frame(interval_char,means)
act0 <- merge(act0, n, by = "interval_char")
View(act0)
act0 <- arrange(act0, time)
View(act0)
act$steps_imputed <- act$steps
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
act$steps_imputed <- act$steps
library(dplyr)
act <- select(act, steps, time)
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
act$steps_imputed <- act$steps
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
if (act$steps = NA){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
act$steps = NA
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
if (act$steps == NA){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
if (act$steps = "NA"){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
range(act, time)
if (is.na(act$steps)){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
View(act)
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
if (is.na(act$steps)=TRUE){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
View(act)
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
if (is.na(act$steps)==TRUE){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
View(act)
is.na(act$steps)
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr)
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$interval_char <- as.factor(act$interval_char)
interval_char<- levels(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
act <- arrange(act, time)
if (is.na(act$steps)){
act$steps_imputed <- act$means
} else {
act$steps_imputed <- act$steps
}
View(act)
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
View(act)
act <- select(act, time, steps, steps_imputed)
setwd("C:/Users/jkempke/Box Sync/Coursera/Activity")
#Download, unzip and read in raw data if it does not already exist in working directory
if (!file.exists("./activity.csv")){
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "./repdata_data_activity.zip", method = "auto")
unzip("./repdata_data_activity.zip")
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
}
#Need to do some work to put a Date-Time variable together
act$interval_char <- as.character(act$interval)
library(stringr) #this has str_pad() function since I need leading zeros for 4-character-length military time
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
#To impute missing steps I want to take average of steps at same time of day over all other days with data
#so I factor the time interval so I can tapply() a mean() function over this factor
act$interval_char <- as.factor(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
activity <- select(act, time, steps, steps_imputed) #Create a nice tiday dataset
?weekdays
act <- mutate(act, dayofweekTF = weekdays(time))
act <- mutate(act, day = ifelse(weekdays(time)==c("Saturday"|"Sunday"), "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time)==c("Saturday","Sunday"), "weekend", "weekday"))
View(act)
act <- mutate(act, day = ifelse(weekdays(time)=c("Saturday","Sunday"), "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time)="Saturday"|"Sunday", "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time)=="Saturday"|"Sunday", "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time)== ("Saturday"|"Sunday"), "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time) == c("Saturday","Sunday"), "weekend", "weekday"))
View(act)
act <- mutate(act, day = ifelse(weekdays(time) == c("Saturday"|"Sunday"), "weekend", "weekday"))
act <- mutate(act, day = ifelse(weekdays(time) == "Saturday" | weekdays(time) =="Sunday"), "weekend", "weekday"))
act <- mutate(act,
day = ifelse(weekdays(time) == "Saturday" | weekdays(time) =="Sunday"), "weekend", "weekday")
act <- mutate(act,
day = ifelse(weekdays(time) = "Saturday" | weekdays(time) ="Sunday"), "weekend", "weekday")
act <- mutate(act,
if(weekdays(time) == "Saturday" | weekdays(time) == "Sunday"){day="weekend"} else{day="weekday"})
View(act)
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
e-Time variable together
act$interval_char <- as.character(act$interval)
library(stringr) #this has str_pad() function since I need leading zeros for 4-character-length military time
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
#To impute missing steps I want to take average of steps at same time of day over all other days with data
#so I factor the time interval so I can tapply() a mean() function over this factor
act$interval_char <- as.factor(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
act <- mutate(act,
if(weekdays(time) == "Saturday" | weekdays(time) == "Sunday"){day="weekend"} else{day="weekday"})
View(act)
act <- mutate(act,
if(weekdays(time) == "Saturday" | weekdays(time) == "Sunday"){day="weekend"} else{day="weekday"})
act <- mutate(act, if(weekdays(time) == "Saturday" | weekdays(time) == "Sunday"){day="weekend"} else{day="weekday"})
act <- mutate(act, if(weekdays(time) == "Saturday") {day="weekend"}
else if (weekdays(time) == "Sunday") {day="weekend"}
else{day="weekday"})
act <- mutate(act, day, if(weekdays(time) == "Saturday") {day="weekend"}
else if (weekdays(time) == "Sunday") {day="weekend"}
else{day="weekday"})
act <- mutate(act, day = NA, if(weekdays(time) == "Saturday") {day="weekend"}
else if (weekdays(time) == "Sunday") {day="weekend"}
else{day="weekday"})
act <- mutate(act, day = as.character(), if(weekdays(time) == "Saturday") {day="weekend"}
else if (weekdays(time) == "Sunday") {day="weekend"}
else{day="weekday"})
act <- mutate(act, day = ifelse(weekdays(time) == "Saturday")|(weekdays(time) == "Sunday"),"weekend","weekday")
?transform
?mutate
act <- mutate(act, day = weekdays(time))
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
act$interval_char <- as.character(act$interval)
library(stringr) #this has str_pad() function since I need leading zeros for 4-character-length military time
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
#To impute missing steps I want to take average of steps at same time of day over all other days with data
#so I factor the time interval so I can tapply() a mean() function over this factor
act$interval_char <- as.factor(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
act <- mutate(act, day = weekdays(time))
act <- mutate(act, day_cat = ifelse(day=="Sunday" | day == "Saturday"), "weekend","weekday")
act <- mutate(act, day_cat = ifelse(day=="Sunday"), ifelse(day == "Saturday"), "weekend","weekday")
act <- mutate(act, day_cat = ifelse(day=="Sunday") | ifelse(day == "Saturday"), "weekend","weekday")
act <- mutate(act, day_cat = ifelse(day=="Sunday", "weekdend",
ifelse(day == "Saturday", "weekend","weekday")))
View(act)
with(act, table(day, day_cat))
activity <- select(act, time, steps, steps_imputed, day_cat) #Create a nice tiday dataset
activity <- select(act, date, time, steps, steps_imputed, day_cat) #Create a nice tiday dataset
table(act$date)
steps_per_day <- tapply(act, steps, INDEX = date, sum)
steps_per_day <- tapply(data = act, steps, INDEX = date, sum)
?tapply
steps_per_day <- with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE)
steps_per_day <- with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE))
steps_per_day <- with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE))
summarize(with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE)))
mean(with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE)))
with(act, plot(time, steps, type = 'l'))
with(act, plot(time, steps, type = "l"))
View(with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE)))
?colSums
split(act, date)
split(act$steps, act$date)
lapply(split(act$steps, act$date), sum)
test <- lapply(split(act$steps, act$date), sum)
test <- lapply(split(act$steps, act$date), sum, ra.nm= TRUE)
test <- unlist(lapply(split(act$steps, act$date), sum, ra.nm= TRUE))
test <- (lapply(split(act$steps, act$date), sum))
test <- as.data.frame(lapply(split(act$steps, act$date), sum))
View(with(act, tapply(steps, INDEX = date, sum, na.rm=TRUE)))
aggregate(steps ~ date, data = act, FUN = sum)
test <- aggregate(steps ~ date, data = act, FUN = sum)
View(test)
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum)
View(steps_per_day)
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, ra.nm = TRUE)
View(steps_per_day)
View(with(act, tapply(steps, date, sum, ra.nm = TRUE)))
?aggregate
?na.action
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, na.action = na.keep)
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, na.action = na.pass)
View(steps_per_day)
with(steps_per_day, plot(steps, type = 'h'))
?plot
with(steps_per_day, plot(steps, type = 'high-density'))
library(ggplot2)
ggplot(steps_per_day, aes(steps))+
geom_histogram()
summarise(steps_per_day$steps)
summarise(steps_per_day)
summarise(steps_per_day, steps)
?summarize
dplyr:summarise(steps_per_day, steps)
dplyr::summarise(steps_per_day, steps)
library(dplyr)
summarise(steps_per_day, steps, mean, median)
summarise(steps_per_day$steps, mean, median)
summarise(steps_per_day, mean(steps), median(steps))
summarise(steps_per_day, mean(steps), median(steps), na.rm = TRUE)
mean(steps_per_day$steps)
mean(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)
ggplot(act, aes(time, steps))+
geom_line()
ggplot(act, aes(time, steps))+
geom_path()
?geom_path
ggplot(act, aes(time, steps))+
geom_path(na.rm = TRUE)
act <- arrange(act, time)
ggplot(act, aes(time, steps))+
geom_path(na.rm = TRUE)
View(act)
with(act, plot(time, step, type = 'l'))
with(act, plot(time, steps, type = 'l'))
with(act[50:200,], plot(time, steps, type = 'l'))
act[max(steps),time]
act[steps==max(steps),time]
act[steps == max(act$steps),act$time]
max(act$steps)
summarise(act, max(steps))
max(act$steps, na.rm= TRUE)
summarise(act, max(steps), na.rm = TRUE)
summarise(act, max(steps, na.rm = TRUE))
max(act$steps, na.rm = TRUE)
act <- arrange(act, steps)
View(act)
max(act$steps =806, na.rm = TRUE)
act[steps == 806,act$time]
act[steps = 806,act$time]
act[steps = 806, time]
act[steps == 806, time]
filter(act, steps = 806)
summary(act$steps)
test <- filter(act, steps = 806)
?strp_time
?strptime
act$time <- strftime(act$time_char, format = "%Y-%m-%d %H%M")
act$time <- strptime(act$time_char, format = "%Y-%m-%d %H%M")
act$time <- as.POSIXct(strptime(act$time_char, format = "%Y-%m-%d %H%M"))
test <- filter(act, steps = 806)
test <- filter(act, steps == 806)
View(test)
act[steps = 806, time]
#To impute missing steps I want to take average of steps at same time of day over all other days with data
#so I factor the time interval so I can tapply() a mean() function over this factor
act$interval_char <- as.factor(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
#now to create factor variable for weekend vs weekdays
act <- mutate(act, day = weekdays(time))
#the brackets in multiple ifelse statements with mutate are tricky, pay attention
act <- mutate(act, day_cat = ifelse(day=="Sunday", "weekdend",
ifelse(day == "Saturday", "weekend","weekday")))
with(act, table(day, day_cat)) #verify this mutate worked
activity <- select(act, date, time, steps, steps_imputed, day_cat) #Create a nice tiday dataset
#First question, mean steps per day.
#Sum up steps using tapply() or  aggrefate() over date coerced to factor, then take mean of this vector
#View(with(act, tapply(steps, date, sum, ra.nm = TRUE)))
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, na.action = na.pass)
library(ggplot2)
ggplot(steps_per_day, aes(steps))+
geom_histogram()
mean(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)
#Time series plot
ggplot(act, aes(time, steps))+
geom_path(na.rm = TRUE)
avg_steps_day <- aggregate(steps ~ interval_char, data = act, FUN = mean, na.action = na.pass)
View(avg_steps_day)
avg_steps_day <- aggregate(steps ~ interval_char, data = act, FUN = mean)
View(avg_steps_day)
avg_steps_day[max(steps)]
avg_steps_day[max(steps),]
avg_steps_day[1,1]
avg_steps_day[,"steps"]
avg_steps_day[max(steps),"steps"]
avg_steps_day[max("steps"),"steps"]
avg_steps_day["steps" = max(steps),"steps"]
avg_steps_day["steps" = max(avg_steps_day),"steps"]
avg_steps_day[steps = max(avg_steps_day),"steps"]
avg_steps_day[steps == max(avg_steps_day),"steps"]
avg_steps_day["steps" == max(avg_steps_day),"steps"]
with(avg_steps_day, max(steps), na.rm = TRUE)
summary(avg_steps_day$steps)
filter(avg_steps_day, max(steps))
filter(avg_steps_day, steps = max(steps))
filter(avg_steps_day, steps == max(steps))
length(is.na(act$steps))
summary(act$steps)
length(is.na(act$steps)= TRUE)
length(is.na(act$steps)== TRUE)
is.na(act$steps)
table(is.na(act$steps))
means <- as.integer(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
#now to create factor variable for weekend vs weekdays
act <- mutate(act, day = weekdays(time))
#the brackets in multiple ifelse statements with mutate are tricky, pay attention
act <- mutate(act, day_cat = ifelse(day=="Sunday", "weekdend",
ifelse(day == "Saturday", "weekend","weekday")))
with(act, table(day, day_cat)) #verify this mutate worked
activity <- select(act, date, time, steps, steps_imputed, day_cat) #Create a nice tiday dataset
#First question, mean steps per day.
#Sum up steps using tapply() or  aggrefate() over date coerced to factor, then take mean of this vector
#View(with(act, tapply(steps, date, sum, ra.nm = TRUE)))
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, na.action = na.pass)
library(ggplot2)
ggplot(steps_per_day, aes(steps))+
geom_histogram()
mean(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)
#Time series plot
ggplot(act, aes(time, steps))+
geom_path(na.rm = TRUE)
#Which 5-minute interval on average has mmost steps?
avg_steps_day <- aggregate(steps ~ interval_char, data = act, FUN = mean)
with(avg_steps_day, max(steps), na.rm = TRUE)
filter(avg_steps_day, steps == max(steps))
#Number of values for steps
table(is.na(act$steps))
summary(act$steps)
ggplot(act, aes(steps_imputed))+
geom_histogram()
act <- read.csv("./activity.csv", stringsAsFactors = FALSE)
#Need to do some work to put a Date-Time variable together
act$interval_char <- as.character(act$interval)
library(stringr) #this has str_pad() function since I need leading zeros for 4-character-length military time
act$interval_char <- str_pad(act$interval_char, 4, side = c("left"), pad ="0")
act$time_char <- paste(act$date, act$interval_char)
act$time <- as.POSIXct(strptime(act$time_char, format = "%Y-%m-%d %H%M"))
#To impute missing steps I want to take average of steps at same time of day over all other days with data
#so I factor the time interval so I can tapply() a mean() function over this factor
act$interval_char <- as.factor(act$interval_char)
means <- as.numeric(with(act, tapply(steps, INDEX=interval_char, mean, na.rm=TRUE)))
#few data steps to merge these means back to full set, matching by time interval factor level
interval_char<- levels(act$interval_char)
n <- data.frame(interval_char,means)
act <- merge(act, n, by = "interval_char")
library(dplyr)
act <- arrange(act, time) #Sorting is not necessary but helps me visualize
#dplyr:mutate() to create steps_imputed with ifelse statement
act <- mutate(act, steps_imputed = ifelse(is.na(steps), means, steps))
#now to create factor variable for weekend vs weekdays
act <- mutate(act, day = weekdays(time))
#the brackets in multiple ifelse statements with mutate are tricky, pay attention
act <- mutate(act, day_cat = ifelse(day=="Sunday", "weekdend",
ifelse(day == "Saturday", "weekend","weekday")))
with(act, table(day, day_cat)) #verify this mutate worked
activity <- select(act, date, time, steps, steps_imputed, day_cat) #Create a nice tiday dataset
#First question, mean steps per day.
#Sum up steps using tapply() or  aggrefate() over date coerced to factor, then take mean of this vector
#View(with(act, tapply(steps, date, sum, ra.nm = TRUE)))
steps_per_day <- aggregate(steps ~ date, data = act, FUN = sum, na.action = na.pass)
library(ggplot2)
ggplot(steps_per_day, aes(steps))+
geom_histogram()
mean(steps_per_day$steps, na.rm = TRUE)
median(steps_per_day$steps, na.rm = TRUE)
#Time series plot
ggplot(act, aes(time, steps))+
geom_path(na.rm = TRUE)
#Which 5-minute interval on average has mmost steps?
avg_steps_day <- aggregate(steps ~ interval_char, data = act, FUN = mean)
with(avg_steps_day, max(steps), na.rm = TRUE)
filter(avg_steps_day, steps == max(steps))
#Number of values for steps
table(is.na(act$steps))
summary(act$steps)
ggplot(act, aes(steps_imputed))+
geom_histogram()
